varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
log(miu)
Sigma
miu
dataLN=rlnorm(100000, meanlog = 2, sdlog = sqrt(5))
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN))-Sigma**2/2
miu
Sigma
Sigma**2
dataLN=rlnorm(1000000, meanlog = 2, sdlog = sqrt(5))
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN))-Sigma**2/2
#log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
#miu=log(mean(dataLN))-Sigma**2/2
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
dataLN=rlnorm(100000000, meanlog = 2, sdlog = sqrt(5))
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
#miu=log(mean(dataLN))-Sigma**2/2
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
install.packages("rootSolve")
library("rootSolve")
ans=multiroot(Equations.start=c(2,3))
ans
dataW = rweibull(1000,2,4)
A=mean(dataW)
n=length(dataLW)
B=var(dataLW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
A=mean(dataW)
n=length(dataW)
B=var(dataW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
ans=multiroot(Equations.start=c(2,3))
ans=multiroot(Equations.start=c(2,2))
ans=multiroot(Equations,start=c(2,2))
ans
rweibull()
?rweibull()
dataW = rweibull(1000,shape = 2, scale = 4)
A=mean(dataW)
n=length(dataW)
B=var(dataW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
ans=multiroot(Equations,start=c(2,2))
ans
Landa=1/ans$root[1]
Beta=ans$root[2]
Landa
Beta
#### Type I ####
lambda=0.001
n=30
C=1000
data=rexp(n, rate=lambda)
data=sort(data)
NewData=data[data<C]
NewData
lambda=0.001
n=30
r=20
data=rexp(n, rate=lambda)
data=sort(data)
NewData=data[1:r]
NewData
C=data[r]
C
c
### Complete data ####
lambda=0.001
n=30
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
#### Type I ####
C=1000
DataT1=dataC[dataC<C]
DataT1
#### Type II ####
r=20
DataT2=dataC[1:r]
C=DataT2[-1]
DataT2
C
C=DataT2[r]
C
#### Complete data ####
lambda=0.001
n=5000
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
lambdaC=1/mean(dataC)
lambdaC
#### Type I ####
C1=1000
DataT1=dataC[dataC<C]
r1=length(DataT1)
lambda1=r1/(sum(DataT1)+(n-r1)*C1)
lambda1
#### Type II ####
r2=20
DataT2=dataC[1:r]
C2=DataT2[r]
lambda2=r2/(sum(DataT2)+(n-r2)*C2)
lambda2
#### Complete data ####
lambda=0.001
n=5000
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
lambdaC=1/mean(dataC)
lambdaC
#### Type I ####
C1=1000
DataT1=dataC[dataC<C]
r1=length(DataT1)
lambda1=r1/(sum(DataT1)+(n-r1)*C1)
lambda1
#### Type II ####
r2=20
DataT2=dataC[1:r2]
C2=DataT2[r2]
lambda2=r2/(sum(DataT2)+(n-r2)*C2)
lambda2
#### Complete data ####
lambda=0.001
n=5000
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
lambdaC=1/mean(dataC)
lambdaC
#### Type I ####
C1=1000
DataT1=dataC[dataC<C1]
r1=length(DataT1)
lambda1=r1/(sum(DataT1)+(n-r1)*C1)
lambda1
#### Type II ####
r2=20
DataT2=dataC[1:r2]
C2=DataT2[r2]
lambda2=r2/(sum(DataT2)+(n-r2)*C2)
lambda2
#### Complete data ####
lambda=0.001
n=5000
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
lambdaC=1/mean(dataC)
lambdaC
#### Type I ####
C1=1000
DataT1=dataC[dataC<C1]
r1=length(DataT1)
lambda1=r1/(sum(DataT1)+(n-r1)*C1)
lambda1
#### Type II ####
r2=3000
DataT2=dataC[1:r2]
C2=DataT2[r2]
lambda2=r2/(sum(DataT2)+(n-r2)*C2)
lambda2
?rexp
data=c(25,58,87,139,28,63,93,157,29,64,111,168,44,64,126,189,57,76,136,212)
n=length(data)
apply(data,dweibull)
sapply(data,dweibull)
dweibull(data[1],32,32)
dweibull(data,beta,lambda)
dweibull(data,1,2)
log.likelihood= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
-sum(log(l))
}
log.likelihood(c(1,2))
nlm(f=log.likelihood,p = c(1,2))
log.likelihood= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
log.likelihood(c(1,2))
nlm(f=log.likelihood,p = c(1,2))
Sol=nlm(f=log.likelihood,p = c(1,2))
Sol$estimate
betaHat=Sol$estimate$1
betaHat=Sol$estimate[1]
lambdaHat=Sol$estimate[2]
data=c(25,58,87,139,28,63,93,157,29,64,111,168,44,64,126,189,57,76,136,212)
n=length(data)
log.likelihood= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
log.likelihood(c(1,2))
Sol=nlm(f = log.likelihood, p = c(1,2))
betaHat=Sol$estimate[1]
lambdaHat=Sol$estimate[2]
Sol
warnings()
Sol=nlm(f = log.likelihood, p = c(1,1))
Sol
?nlm
R=function(t){
return(1-pweibull(t, shape = betaHat, scale = 1/lambdaHat))
}
R(90)
return(pweibull(t, shape = betaHat, scale = 1/lambdaHat,lower.tail = FALSE))
R=function(t){
return(pweibull(t, shape = betaHat, scale = 1/lambdaHat,lower.tail = FALSE))
}
R(90)
tt=seq(0, 500, 0.5)
rr=sapply(tt, R)
plot(rr)
clear
cls
data=c(0.7,52.7,129.7,187.8,264.4,272.8,304.2,305.1,309.8,310.5)
r=length(data)
n=25
log.likelihood= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
l[(r+1):n]=pweibull(data[r],beta,1/lambda, lower.tail = FALSE)
return(-sum(log(l)))
}
Sol=nlm(f = log.likelihood, p = c(1,1))
Sol #Code debe dar 1 o 2
betaHat=Sol$estimate[1]
lambdaHat=Sol$estimate[2]
Sol=nlm(f = log.likelihood, p = c(1.1,0.05))
Sol #Code debe dar 1 o 2
Sol=nlm(f = log.likelihood, p = c(1.1,0.005))
Sol #Code debe dar 1 o 2
sort(data)
data=c(0.06,0.8,0.3,0.03,1.2,0.7,0.92,0.41,0.23,0.32,1.1,1.9,0.4,1.31,1.2,0.7,14,0.9,0.93,0.27)
sort(data)
data=sort(data)
sum(data>data[i])
sum(data>data)
sum(data>data[0])
data[0]
data[1]
sum(data>data[1])
sum(data>data[1])/length(data)
c(0)+data
R=c(0,data)
t[0]=1
sum(data>t)/length(data)
t=c(0,data)
sum(data>t)/length(data)
data>t
t=c(0,data)
R=rep(0, length(data)+1)
for(i in 1:length(R)){
R[i]=sum(data>t[i])/length(data)
}
plot(R)
plot(R, type = "l")
plot(t,R, type = "l")
t
data=c(0.06,0.8,0.3,0.03,1.2,0.7,0.92,0.41,0.23,0.32,1.1,1.9,0.4,1.31,1.2,0.7,1.4,0.9,0.93,0.27)
data=sort(data)
t=c(0,data)
R=rep(0, length(data)+1)
for(i in 1:length(R)){
R[i]=sum(data>t[i])/length(data)
}
plot(t,R, type = "l")
t
plot(t,R, type = "s")
R
RHat/20
data=c(0.06,0.8,0.3,0.03,1.2,0.7,0.92,0.41,0.23,0.32,1.1,1.9,0.4,1.31,1.2,0.7,1.4,0.9,0.93,0.27)
data=sort(data)
t=c(0,data)
RHat=rep(0, length(data)+1)
for(i in 1:length(R)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat/20
RHat*20
t=c(0,unique(data))
RHat=rep(0, length(data)+1)
for(i in 1:length(R)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat*20
RHat=rep(0, t)
RHat=rep(0, length(t))
for(i in 1:length(R)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat*20
data=c(0.06,0.8,0.3,0.03,1.2,0.7,0.92,0.41,0.23,0.32,1.1,1.9,0.4,1.31,1.2,0.7,1.4,0.9,0.93,0.27)
data=sort(data)
t=c(0,unique(data))
RHat=rep(0, length(t))
for(i in 1:length(R)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat=rep(0, length(t))
for(i in 1:length(RHat)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat*20
set.seed(2022)
data=rexp(1000,rate = 3)
data
# Solution 1
qplot(data = data)
library(ggplot2)
# Solution 1
qplot(data = data)
# Solution 1
qplot(data)
# Solution 1
qqplot(data)
# Solution 1
hist(data)
# Solution 1
hist(data,probability = TRUE)
qqline(data)
qqnorm(data)
qqline(data)
?qqnorm()
qqline(data)
qqnorm(data)
qqline(data, distribution = qexp)
qqexp(data)
qqline(data, distribution = qnorm)
hist(data)
hist(data, density = TRUE)
hist(data, freq = FALSE)
library(MASS)
Hwt
Cats
cats
hist(cats$Hwt, freq = FALSE)
qqnorm(cats$Hwt)
qqline(cats$Hwt, distribution = qnorm)
qqline(cats$Hwt, distribution = qnorm, color='red')
qqline(cats$Hwt, distribution = qnorm, col='red')
qqline(cats$Hwt, distribution = qnorm, col="red")
qqnorm(cats$Hwt)
qqline(cats$Hwt, distribution = qnorm, col="red")
hist(cats$Hwt, freq = FALSE, bins=30)
hist(cats$Hwt, freq = FALSE, bin=30)
hist(cats$Hwt, freq = FALSE,breaks = 30)
?ppoints
qqnorm(data)
qqline(data, distribution = qexp)
qqline(data, distribution = qexp(rate = 3))
qqline(data, distribution = qexp(data,rate = 3))
qexp(data,rate = 3)
pexp(data,rate = 3)
qqline(data, distribution = pexp(data,rate = 3))
qqnorm(cats$Hwt)
qqline(cats$Hwt, distribution = qnorm, col="red")
shapiro.test(cats$Hwt)
library(cars)
library(CAR)
library(car)
qqplot(cats$Hwt)
qqplot(cats$Hwt)
qqPlot(cats$Hwt)
lillie.test(cats$Hwt)
library(lmtest)
lillie.test(cats$Hwt)
library(nortest)
lillie.test(cats$Hwt)
ks.test(cats$Hwt)
?ks.test(cats$Hwt,)
ks.test(cats$Hwt,"pexp",rate=3)
ks.test(data,"pexp",rate=3)
ks.test(cats$Hwt)
ks.test(cats$Hwt,"pnorm",rate=3)
ks.test(cats$Hwt,"pnorm",mu=3)
ks.test(cats$Hwt,"pnorm",mean=3)
ks.test(cats$Hwt,"pnorm")
ks.test(data,"pexp",rate=3)
ks.test(data,"pexp")
ks.test(cats$Hwt,"pnorm", mean=mean(cats$Hwt))
?pnorm
ks.test(cats$Hwt,"pnorm", mean=mean(cats$Hwt), sd=sd(cats$Hwt))
shapiro.test(cats$Hwt)
lillie.test(cats$Hwt)
dataN=rnorm(100,12,3)
shapiro.test(dataN)
ks.test(dataN,"pnorm")
ks.test(dataN,"pnorm", mean=mean(dataN), sd=sd(dataN))
shapiro.test(dataN)
shapiro.test(cats$Hwt)
lillie.test(dataN)
mean(cats$Hwt)
sd(cats$Hwt)
ks.test(cats$Hwt,"pnorm", mean=10, sd=2.5)
ks.test(dataN,"pnorm", mean=mean(dataN), sd=sd(dataN))
shapiro.test(dataN)
lillie.test(dataN)
shapiro.test(cats$Hwt)
lillie.test(cats$Hwt)
ks.test(cats$Hwt,"pnorm", mean=mean(cats$Hwt), sd=sd(cats$Hwt))
qqline(data, distribution = qexp)
qqnorm(data)
qqline(data, distribution = qexp)
ppoints(1)
ppoints(100)
qqnorm(qexp(ppoints(500)),data)
qqnorm(qexp(ppoints(1000)),data)
qqplot(qexp(ppoints(1000)) ,data)
qqline(data, distribution = qexp)
qqplot(qexp(ppoints(100)) ,data)
qqline(data, distribution = qexp)
qqplot(qexp(ppoints(500)) ,data)
qqline(data, distribution = qexp)
qqplot(qexp(ppoints(1000)) ,data)
qqline(data, distribution = qexp)
qqline(data, distribution = qexp, col="red")
qqplot(qexp(ppoints(500),rate = 3) ,data)
qqline(data, distribution = qexp, col="red")
qqline(data, distribution = function(p) qexp(p,rate = 3), col="red")
qqplot(qgamma(ppoints(500), rate = 3, shape = 1) ,data)
qqline(data, distribution = function(p) qgamma(p,rate = 3), col="red")
qqline(data, distribution = function(p) qgamma(p,rate = 3, shape = 1), col="red")
qqnorm(data)
qqline(data)
qqline(data, col="red")
qqplot(qgamma(ppoints(500), rate = 1, shape = 1) ,data)
qqline(data, distribution = function(p) qgamma(p,rate = 1, shape = 1), col="red")
qqplot(qgamma(ppoints(500), rate = 3, shape = 1) ,data)
qqline(data, distribution = function(p) qgamma(p,rate = 3, shape = 1), col="red")
qqplot(qgamma(ppoints(500), rate = 1, shape = 1) ,data)
qqline(data, distribution = function(p) qgamma(p,rate = 1, shape = 1), col="red")
qqPlot(cats$Hwt)
qqplot(qlnorm(ppoints(500), meanlog =  5, sdlog = sqrt(5)) ,data)
qqline(data, distribution = function(p) qlnorm(p,meanlog =  5, sdlog = sqrt(5)), col="red")
ks.test(data,"pexp",rate=3)
ks.test(data,"pgamma",rate=3, shape = 1)
ks.test(data,"plnorm",meanlog =  5, sdlog = sqrt(5))
qqplot(qexp(ppoints(500),rate = 3) ,data)
qqline(data, distribution = function(p) qexp(p,rate = 3), col="red")
ks.test(data,"pexp",rate=3)
qqplot(qgamma(ppoints(500), rate = 3, shape = 1) ,data)
qqline(data, distribution = function(p) qgamma(p,rate = 3, shape = 1), col="red")
ks.test(data,"pgamma",rate=3, shape = 1)
qqplot(qlnorm(ppoints(500), meanlog =  5, sdlog = sqrt(5)) ,data)
qqline(data, distribution = function(p) qlnorm(p,meanlog =  5, sdlog = sqrt(5)), col="red")
ks.test(data,"plnorm",meanlog =  5, sdlog = sqrt(5))
qqline(data, col="red")
qqnorm(data)
qqline(data, col="red")
qqnorm(dataN)
qqline(dataN, col="red")
qqPlot(cats$Hwt)
?qqPlot(cats$Hwt)
qqPlot(data, distribution = "exp")
qqPlot(dataN)
qqPlot(data, distribution = "gamma")
qqPlot(data, distribution = "gamma", shape = 1)
qqPlot(dataN,distribution = "norm", mean = 1)
qqPlot(dataN,distribution = "norm", mean = 12)
qqPlot(data, distribution = "exp")
qqPlot(data, distribution = "exp", rate = 3)
qqPlot(data, distribution = "lnorm", meanlog =  5, sdlog = sqrt(5))
qqPlot(data, distribution = "lnorm")
qqPlot(data, distribution = "lnorm", meanlog =  1, sdlog = sqrt(5))
library(survival, lib.loc = "C:/Program Files/R/R-4.0.5/library")
library(survival)
