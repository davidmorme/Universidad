P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
U=rexp(n*scenarios,rate=rateU)
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
U=matrix(U,nrow = scenarios,ncol = n)
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U1[,i]
R1[,i]=P1[,i]+D1[,i]
}
t=seq(0,max(R1[,n]),2)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
Disp
t
max(R1[,n])
R1[,n]
R1[,n-1]
R1[1,i-1]+U1[1,i]
i=2
R1[1,i-1]+U1[1,i]
P1
P1[1]
P1[1,]
U[,1]
P1[,1]=U[,1]
P1[,1]
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U[,i]
R1[,i]=P1[,i]+D[,i]
}
t=seq(0,max(R1[,n]),2)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
t=seq(0,max(R1[,n]),500)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
plot(t,Disp, type = "s", xlim=c(0,2000))
plot(t,Disp, type = "s", xlim=c(0,20000))
plot(t,Disp,  xlim=c(0,20000))
plot(t,Disp,  xlim=c(0,5*10e5))
plot(t,Disp,  xlim=c(0,2*10e5))
plot(t,Disp,  xlim=c(0,2*10e4))
plot(t,Disp,  xlim=c(0, 5*10e4))
plot(t,Disp,  xlim=c(0, 2*10e4))
plot(t,Disp,  xlim=c(0, 2*10e3))
plot(t,Disp,  xlim=c(0, 5*10e3))
?plot(t,Disp, type = '' ,xlim=c(0, 5*10e3))
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3))
t=seq(0,max(R1[,n]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3))
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3))
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0,1))
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
U1=U[1,]
D1=D[1,]
P1=rep(0, n)
R1=rep(0, n)
P1[1]=U1[1]
R1[1]=P1[1]+D1[1]
for(i in 2:n){
P1[i]=R1[i-1]+U1[i]
R1[i]=P1[i]+D1[i]
}
t=seq(0,R1[n],2)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U[,i]
R1[,i]=P1[,i]+D[,i]
}
t=seq(0,max(R1[,n]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
U=matrix(U,nrow = scenarios,ncol = n)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U[,i]
R1[,i]=P1[,i]+D[,i]
}
t=seq(0,max(R1[,n]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD)
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.8,0.9), main='Disponibilité de produit dans le temps')
rateD=1/mean(data)/0.5
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U[,i]
R1[,i]=P1[,i]+D[,i]
}
t=seq(0,max(R1[,n]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
FailureTimes_5=read.csv('FailureTimes_5.csv',sep = ',')
data=FailureTimes_5$Heures
#Necesario haber confirmado que funcione la función exponencial, si no, cambiar
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
U=matrix(U,nrow = scenarios,ncol = n)
rateD=1/mean(data)/0.5
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
##### Une Seul produit ####
U1=U[1,]
D1=D[1,]
r1=P1[1]+D1[1]
R1=cumsum(r1)
P1=R1-D1[1]
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
r1=U1[1]+D1[1]
R1=cumsum(r1)
P1=R1-D1[1]
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
U1=U[1,]
D1=D[1,]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t[i])+sum(R1<=t[i])
}
works(1000)
works=function(t){
return(sum(P1<=t[i])-sum(R1<=t[i]) )
}
works(1000)
return(sum(P1<=t)-sum(R1<=t) )
works=function(t){
return(sum(P1<=t)-sum(R1<=t) )
}
works(1000)
works(12000)
works(1100)
works=function(t){
return(sum(P1<=t)==sum(R1<=t))
}
works(1100)
works(1000)
Disp=lapply(t,works)
Disp
t
works=function(t){
return(sum(P1<=t)-sum(R1<=t))
}
works(1000)
Disp=lapply(t,works)
Disp
works=function(t){
return(sum(P1<=t)==sum(R1<=t))
}
Disp=lapply(t,works)
Disp=lapply(t,works,simplify = "array")
?lapply
Disp=lapply(t,works,simplify = TRUE)
Disp=rep(0, length(t))
works=function(t){
return(sum(P1<=t)==sum(R1<=t))
}
Disp=lapply(t,works,simplify = TRUE)
sum(P1<=t)==sum(R1<=t)
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
works(1000)
Disp=lapply(t,works,simplify = TRUE)
Disp=lapply(t,works)
Disp
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
works(1000)
Disp=lapply(t,works)
Disp
flatten(Disp)
?lapply
?flatten(Disp)
library(ramify)
as.vector(Disp)
install.packages('ramify')
library(ramify)
flatten(Disp)
Disp=vapply(t,works)
Disp=sapply(t,works)
Disp
plot(t,Disp, type = "s")
r=U+D
R=cumsum(r)
R
?cumsum(r, )
apply(r, 2, cumsum)
R=apply(r, 2, cumsum)
R
View(U)
R1<t
View(R)
R=apply(r, 1, cumsum)
R=apply(r, 0, cumsum)
R=apply(r, 2, cumsum)
View(D)
View(U)
View(r)
R=apply(r, 1, cumsum)
R=apply(r, 0, cumsum)
R=apply(r, -1, cumsum)
R=apply(r, -2, cumsum)
R=apply(r, -3, cumsum)
R=apply(r, -1, cumsum)
R=apply(r, 0, cumsum)
R=apply(r, 1, cumsum)
R=apply(r, 2, cumsum)
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
U=matrix(U,nrow = n,ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = n,ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s")
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
Disp=rep(0, length(t))
P<=1000
sum(P<=1000)
t=seq(0,max(R[n,]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
sum(P<=10)
um(P<=10000)
sum(P<=10000)
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P<=t[i])+sum(R<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
works=function(t){
sum(P<=t)-sum(R<=t)
}
works(10000)
reparation=function(t){
sum(P<=t)-sum(R<=t)
}
reparation(10000)
scenarios-reparation(10000)
(scenarios-reparation(10000))/scenarios
Disp=sapply(t,reparation)
Disp=(scenarios-Disp)/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
FailureTimes_5=read.csv('FailureTimes_5.csv',sep = ',')
data=FailureTimes_5$Heures
#Necesario haber confirmado que funcione la función exponencial, si no, cambiar
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios, rate=rateU)
U=matrix(U,nrow = n, ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios, rate=rateD)
D=matrix(D,nrow = n, ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s")
##### Generic ####
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
reparation=function(t){ #Products in reparation
sum(P<=t)-sum(R<=t)
}
reparation(10000)
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
rateU=1/mean(data)
scenarios=100
n=100
set.seed(111)
U=rexp(n*scenarios, rate=rateU)
U=matrix(U,nrow = n, ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios, rate=rateD)
D=matrix(D,nrow = n, ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s", main="Disponibilité du premier produit dans le temps")
##### Generic ####
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
reparation=function(t){ #Products in reparation
sum(P<=t)-sum(R<=t)
}
reparation(10000)
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
rateU=1/mean(data)
scenarios=1000
n=100
set.seed(111)
U=rexp(n*scenarios, rate=rateU)
U=matrix(U,nrow = n, ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios, rate=rateD)
D=matrix(D,nrow = n, ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s", main="Disponibilité du premier produit dans le temps")
##### Generic ####
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
reparation=function(t){ #Products in reparation
sum(P<=t)-sum(R<=t)
}
reparation(10000)
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios, rate=rateU)
U=matrix(U,nrow = n, ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios, rate=rateD)
D=matrix(D,nrow = n, ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s", main="Disponibilité du premier produit dans le temps")
##### Generic ####
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
reparation=function(t){ #Products in reparation
sum(P<=t)-sum(R<=t)
}
reparation(10000)
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
