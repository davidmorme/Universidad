r1=U1[1]+D1[1]
R1=cumsum(r1)
P1=R1-D1[1]
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
U1=U[1,]
D1=D[1,]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t[i])+sum(R1<=t[i])
}
works(1000)
works=function(t){
return(sum(P1<=t[i])-sum(R1<=t[i]) )
}
works(1000)
return(sum(P1<=t)-sum(R1<=t) )
works=function(t){
return(sum(P1<=t)-sum(R1<=t) )
}
works(1000)
works(12000)
works(1100)
works=function(t){
return(sum(P1<=t)==sum(R1<=t))
}
works(1100)
works(1000)
Disp=lapply(t,works)
Disp
t
works=function(t){
return(sum(P1<=t)-sum(R1<=t))
}
works(1000)
Disp=lapply(t,works)
Disp
works=function(t){
return(sum(P1<=t)==sum(R1<=t))
}
Disp=lapply(t,works)
Disp=lapply(t,works,simplify = "array")
?lapply
Disp=lapply(t,works,simplify = TRUE)
Disp=rep(0, length(t))
works=function(t){
return(sum(P1<=t)==sum(R1<=t))
}
Disp=lapply(t,works,simplify = TRUE)
sum(P1<=t)==sum(R1<=t)
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
works(1000)
Disp=lapply(t,works,simplify = TRUE)
Disp=lapply(t,works)
Disp
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
works(1000)
Disp=lapply(t,works)
Disp
flatten(Disp)
?lapply
?flatten(Disp)
library(ramify)
as.vector(Disp)
install.packages('ramify')
library(ramify)
flatten(Disp)
Disp=vapply(t,works)
Disp=sapply(t,works)
Disp
plot(t,Disp, type = "s")
r=U+D
R=cumsum(r)
R
?cumsum(r, )
apply(r, 2, cumsum)
R=apply(r, 2, cumsum)
R
View(U)
R1<t
View(R)
R=apply(r, 1, cumsum)
R=apply(r, 0, cumsum)
R=apply(r, 2, cumsum)
View(D)
View(U)
View(r)
R=apply(r, 1, cumsum)
R=apply(r, 0, cumsum)
R=apply(r, -1, cumsum)
R=apply(r, -2, cumsum)
R=apply(r, -3, cumsum)
R=apply(r, -1, cumsum)
R=apply(r, 0, cumsum)
R=apply(r, 1, cumsum)
R=apply(r, 2, cumsum)
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
U=matrix(U,nrow = n,ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = n,ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s")
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
Disp=rep(0, length(t))
P<=1000
sum(P<=1000)
t=seq(0,max(R[n,]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
sum(P<=10)
um(P<=10000)
sum(P<=10000)
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P<=t[i])+sum(R<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
works=function(t){
sum(P<=t)-sum(R<=t)
}
works(10000)
reparation=function(t){
sum(P<=t)-sum(R<=t)
}
reparation(10000)
scenarios-reparation(10000)
(scenarios-reparation(10000))/scenarios
Disp=sapply(t,reparation)
Disp=(scenarios-Disp)/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
FailureTimes_5=read.csv('FailureTimes_5.csv',sep = ',')
data=FailureTimes_5$Heures
#Necesario haber confirmado que funcione la función exponencial, si no, cambiar
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios, rate=rateU)
U=matrix(U,nrow = n, ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios, rate=rateD)
D=matrix(D,nrow = n, ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s")
##### Generic ####
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
reparation=function(t){ #Products in reparation
sum(P<=t)-sum(R<=t)
}
reparation(10000)
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
rateU=1/mean(data)
scenarios=100
n=100
set.seed(111)
U=rexp(n*scenarios, rate=rateU)
U=matrix(U,nrow = n, ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios, rate=rateD)
D=matrix(D,nrow = n, ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s", main="Disponibilité du premier produit dans le temps")
##### Generic ####
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
reparation=function(t){ #Products in reparation
sum(P<=t)-sum(R<=t)
}
reparation(10000)
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
rateU=1/mean(data)
scenarios=1000
n=100
set.seed(111)
U=rexp(n*scenarios, rate=rateU)
U=matrix(U,nrow = n, ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios, rate=rateD)
D=matrix(D,nrow = n, ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s", main="Disponibilité du premier produit dans le temps")
##### Generic ####
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
reparation=function(t){ #Products in reparation
sum(P<=t)-sum(R<=t)
}
reparation(10000)
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios, rate=rateU)
U=matrix(U,nrow = n, ncol = scenarios)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios, rate=rateD)
D=matrix(D,nrow = n, ncol = scenarios)
##### Une Seul produit ####
U1=U[,1]
D1=D[,1]
r1=U1+D1
R1=cumsum(r1)
P1=R1-D1
t=seq(0,R1[n],100)
Disp=rep(0, length(t))
works=function(t){
sum(P1<=t)==sum(R1<=t)
}
Disp=sapply(t,works)
plot(t,Disp, type = "s", main="Disponibilité du premier produit dans le temps")
##### Generic ####
r=U+D
R=apply(r, 2, cumsum)
P=R-D
t=seq(0,max(R[n,]),100)
reparation=function(t){ #Products in reparation
sum(P<=t)-sum(R<=t)
}
reparation(10000)
Disp=(scenarios-sapply(t,reparation))/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
?rbeta
?dnorm
pnorm(0.025)
qnorm(0.025)
qnorm(1-0.025)
pi=11/20
n=20
z=qnorm(1-0.025)
pi-z*sqrt(pi*(1-pi)/n)
pi+z*sqrt(pi*(1-pi)/n)
?qbeta()
qbeta(0.025,16,14)
qbeta(0.975,16,14)
0.975+0.025
factorial(20) / (factorial(11) * (factorial(9)))
com=factorial(20) / (factorial(11) * (factorial(9)))
log_likelihood_Heads=function(pi){
log(com)+11*log(pi)+9*log(1-pi)
}
lLHeads=apply(pis,log_likelihood_Heads)
lLHeads=rapply(pis,log_likelihood_Heads)
lLHeads=lapply(pis,log_likelihood_Heads)
lLHeads=sapply(pis,log_likelihood_Heads)
pis=seq(0,1,100)
lLHeads=sapply(pis,log_likelihood_Heads)
plot(pis,lLHeads)
log_likelihood_Heads(0)
pis=seq(0.01,1,100)
com=factorial(20) / (factorial(11) * (factorial(9)))
log_likelihood_Heads=function(pi){
log(com)+11*log(pi)+9*log(1-pi)
}
log_likelihood_Heads(0)
lLHeads=sapply(pis,log_likelihood_Heads)
plot(pis,lLHeads)
sapply(pis,log_likelihood_Heads)
pis=seq(0.01,1,100)
pis=seq(0.01,1,0.001)
pis=seq(0.01,1,0.01)
lLHeads=sapply(pis,log_likelihood_Heads)
plot(pis,lLHeads)
plot(pis,lLHeads,'l')
plot(pis,lLHeads,'l', main='log-likelihood function')
pis=seq(0.01,1,0.001)
lLHeads=sapply(pis,log_likelihood_Heads)
plot(pis,lLHeads,'l', main='log-likelihood function')
pis=seq(0.001,1,0.001)
lLHeads=sapply(pis,log_likelihood_Heads)
plot(pis,lLHeads,'l', main='log-likelihood function')
pis=seq(0.005,1,0.001)
lLHeads=sapply(pis,log_likelihood_Heads)
plot(pis,lLHeads,'l', main='log-likelihood function')
plot(pis,lLHeads,'l', main='log-likelihood function',xlab = 'Pi',ylab = 'log-likelihood')
pbeta(pis,5,5)
priori=pbeta(pis,5,5)
plot(pis,priori,'l', main='function a priori',xlab = 'Pi',ylab = 'Beta distribution')
?pbeta(pis,5,5)
priori=dbeta(pis,5,5)
plot(pis,priori,'l', main='function a priori',xlab = 'Pi',ylab = 'Beta distribution')
plot(pis,priori,'l', main='Prior function',xlab = 'Pi',ylab = 'Beta distribution')
post=dbeta(pis,16,14)
plot(pis,post,'l', main='Prosterior function',xlab = 'Pi',ylab = 'Beta distribution')
plot(pis,priori,'l', main='Prior function',xlab = 'Pi',ylab = 'Density')
plot(pis,post,'l', main='Prosterior function',xlab = 'Pi',ylab = 'Density')
plot(pis,priori,'l', main='Prior function',xlab = 'Pi',ylab = 'Density')
line(pis,post,'l')
lines(pis,post,'l')
lines(pis,priori,'l')
plot(pis,post,'l', main='Prior function',xlab = 'Pi',ylab = 'Density')
lines(pis,priori,'l')
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='blue')
lines(pis,priori,'l', col='red')
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='red')
lines(pis,priori,'l', col='blue')
legend("bottomright", legend = c('blue',"red"),
lwd = 3, col = c('blue',"red"))
legend( legend = c('blue',"red"),
lwd = 3, col = c('blue',"red"))
?legend("bottomright", legend = c('blue',"red"),
lwd = 3, col = c('blue',"red"))
legend("upperright", legend = c('blue',"red"),
lwd = 3, col = c('blue',"red"))
legend("topright", legend = c('blue',"red"),
lwd = 3, col = c('blue',"red"))
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='red')
lines(pis,priori,'l', col='blue')
legend("topright", legend = c('blue',"red"),
lwd = 3, col = c('blue',"red"))
legend("topright", legend = c('Prior',"Posterior"),
lwd = 3, col = c('blue',"red"))
postU=dbeta(pis,16,14)
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='blue')
postU=dbeta(pis,12,10)
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='blue')
lines(pis,postU,'l', col='red')
legend("topright", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"))
legend("topright", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 1, col = c('blue',"red"))
legend("topright", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"))
legend("topright", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), border = NULL)
legend("topright", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), border = 'NULL')
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='blue')
lines(pis,postU,'l', col='red')
legend("topright", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), border = NULL)
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='blue')
lines(pis,postU,'l', col='red')
legend("topright", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), border = 'NULL')
legend("topleft", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), border = 'NULL')
legend("topleft", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), bty = 'n')
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='blue')
lines(pis,postU,'l', col='red')
legend("topleft", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), bty = 'n')
legend("topright", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), bty = 'n')
plot(pis,post,'l', main='Prior and Posterior functions',xlab = 'Pi',ylab = 'Density', col='blue')
lines(pis,postU,'l', col='red')
legend("topleft", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), bty = 'n')
plot(pis,post,'l', main='Posterior functions',xlab = 'Pi',ylab = 'Density', col='blue')
lines(pis,postU,'l', col='red')
legend("topleft", legend = c('Posterior with information',"Posterior with Uniform"),
lwd = 3, col = c('blue',"red"), bty = 'n')
plot(pis,post/postU)
plot(pis,postU/post)
plot(pis,post/postU)
plot(pis,post/postU,'l', main="Bayes' factor Posterior functions",xlab = 'Pi',ylab = 'Ratio')
convexf=function(t){
1/(t+1)**2
}
ts=seq(0,100,1)
plot(ts,sapply(ts,convexf),'l', main="Density function of Convex example",xlab = 't',ylab = 'Density')
ts=seq(0,50,1)
plot(ts,sapply(ts,convexf),'l', main="Density function of Convex example",xlab = 't',ylab = 'Density')
ts=seq(0,10,1)
plot(ts,sapply(ts,convexf),'l', main="Density function of Convex example",xlab = 't',ylab = 'Density')
ts=seq(0,10,0.1)
plot(ts,sapply(ts,convexf),'l', main="Density function of Convex example",xlab = 't',ylab = 'Density')
plot(ts,sapply(ts,convexf),'l', main="Reliability function of convex example",xlab = 't',ylab = 'Density')
convexh=function(t){
1/(t+1)
}
plot(ts,sapply(ts,convexh),'l', main="Hazard function of convex example",xlab = 't',ylab = 'Density')
plot(ts,sapply(ts,convexR),'l', main="Reliability function of convex example",xlab = 't',ylab = 'R(t)')
convexR=function(t){
1/(t+1)**2
}
ts=seq(0,10,0.1)
plot(ts,sapply(ts,convexR),'l', main="Reliability function of convex example",xlab = 't',ylab = 'R(t)')
plot(ts,sapply(ts,convexh),'l', main="Hazard function of convex example",xlab = 't',ylab = 'h(t)')
concaveR=function(t){
-4/9*x**2+1
}
ts=seq(0,10,0.1)
ts=seq(0,1.5,0.1)
plot(ts,sapply(ts,concaveR),'l', main="Reliability function of concave example",xlab = 't',ylab = 'R(t)')
concaveh=function(t){
-8*t/(4*t**2-9)
}
concaveR=function(t){
-4/9*t**2+1
}
ts=seq(0,1.5,0.1)
plot(ts,sapply(ts,concaveR),'l', main="Reliability function of concave example",xlab = 't',ylab = 'R(t)')
concaveh=function(t){
-8*t/(4*t**2-9)
}
plot(ts,sapply(ts,concaveh),'l', main="Hazard function of concave example",xlab = 't',ylab = 'h(t)')
ts=seq(0,1.5,0.01)
plot(ts,sapply(ts,concaveR),'l', main="Reliability function of concave example",xlab = 't',ylab = 'R(t)')
concaveh=function(t){
-8*t/(4*t**2-9)
}
plot(ts,sapply(ts,concaveh),'l', main="Hazard function of concave example",xlab = 't',ylab = 'h(t)')
