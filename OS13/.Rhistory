##### Acelerating Life Testing with Weibull distribution #####
#### Tempreature 150 ˚C (Complete data) ####
data3=c(420,650,703,838,1086,1125,1378,1673,1896,2037)
n3=length(data3)
log.likelihood3= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data3,beta,1/lambda)
return(-sum(log(l)))
}
log.likelihood(c(0.0001,2))
Sol3=nlminb(c(0.0001,2),log.likelihood3, hessian = TRUE)
Sol3 #Code debe dar 1 o 2
betaHat3=Sol3$par[1]
lambdaHat3=Sol3$par[2]
#### Tempreature 120 ˚C (Censored data) ####
data2=c(1121,1572,2329,2573,2702,3702,4277)
r=length(data)
C2=4500
n=8
log.likelihood2= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data2,beta,1/lambda)
l[(r+1):n]=pweibull(C2,beta,1/lambda, lower.tail = FALSE)
return(-sum(log(l)))
}
Sol2=nlminb(c(0.0001,2),log.likelihood2, hessian = TRUE)
Sol2 #Code debe dar 1 o 2
betaHat2=Sol$par[1]
lambdaHat2=Sol$par[2]
betaHat2=Sol2$par[1]
lambdaHat2=Sol2$par[2]
Sol2=nlminb(c(2,0.0001),log.likelihood2, hessian = TRUE)
Sol2 #Code debe dar 1 o 2
betaHat2=Sol2$par[1]
lambdaHat2=Sol2$par[2]
data3=c(420,650,703,838,1086,1125,1378,1673,1896,2037)
n3=length(data3)
log.likelihood3= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data3,beta,1/lambda)
return(-sum(log(l)))
}
log.likelihood(c(0.0001,2))
Sol3=nlminb(c(0.0001,2),log.likelihood3, hessian = TRUE)
Sol3 #Code debe dar 1 o 2
betaHat3=Sol3$par[1]
lambdaHat3=Sol3$par[2]
data2=c(1121,1572,2329,2573,2702,3702,4277)
r2=length(data2)
C2=4500
n2=8
log.likelihood2= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data2,beta,1/lambda)
l[(r2+1):n2]=pweibull(C2,beta,1/lambda, lower.tail = FALSE)
return(-sum(log(l)))
}
Sol2=nlminb(c(2,0.0001),log.likelihood2, hessian = TRUE)
Sol2 #Code debe dar 1 o 2
betaHat2=Sol2$par[1]
lambdaHat2=Sol2$par[2]
data1=c(1638, 1944, 2764, 2846, 3546, 4803, 5139, 5446)
r1=length(data1)
C1=5500
n1=8
log.likelihood1= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data1,beta,1/lambda)
l[(r1+1):n1]=pweibull(C1,beta,1/lambda, lower.tail = FALSE)
return(-sum(log(l)))
}
Sol1=nlminb(c(2,0.0001),log.likelihood2, hessian = TRUE)
Sol1 #Code debe dar 1 o 2
betaHat1=Sol1$par[1]
lambdaHat1=Sol1$par[2]
data1=c(1638, 1944, 2764, 2846, 3546, 4803, 5139, 5446)
r1=length(data1)
C1=5500
n1=8
log.likelihood1= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data1,beta,1/lambda)
l[(r1+1):n1]=pweibull(C1,beta,1/lambda, lower.tail = FALSE)
return(-sum(log(l)))
}
Sol1=nlminb(c(2,0.0001),log.likelihood1, hessian = TRUE)
Sol1 #Code debe dar 1 o 2
betaHat1=Sol1$par[1]
lambdaHat1=Sol1$par[2]
#### Tempreature 150 ˚C (Complete data) ####
data3=c(420,650,703,838,1086,1125,1378,1673,1896,2037)
n3=length(data3)
log.likelihood3= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data3,beta,1/lambda)
return(-sum(log(l)))
}
Sol3=nlminb(c(0.0001,2),log.likelihood3, hessian = TRUE)
Sol3 #Code debe dar 1 o 2
betaHat3=Sol3$par[1]
lambdaHat3=Sol3$par[2]
#### Tempreature 120 ˚C (Censored data) ####
data2=c(1121,1572,2329,2573,2702,3702,4277)
r2=length(data2)
C2=4500
n2=8
log.likelihood2= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data2,beta,1/lambda)
l[(r2+1):n2]=pweibull(C2,beta,1/lambda, lower.tail = FALSE)
return(-sum(log(l)))
}
Sol2=nlminb(c(2,0.0001),log.likelihood2, hessian = TRUE)
Sol2 #Code debe dar 1 o 2
betaHat2=Sol2$par[1]
lambdaHat2=Sol2$par[2]
#### Tempreature 100 ˚C (Censored data) ####
data1=c(1638, 1944, 2764, 2846, 3546, 4803, 5139, 5446)
r1=length(data1)
C1=5500
n1=8
log.likelihood1= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data1,beta,1/lambda)
l[(r1+1):n1]=pweibull(C1,beta,1/lambda, lower.tail = FALSE)
return(-sum(log(l)))
}
Sol1=nlminb(c(2,0.0001),log.likelihood1, hessian = TRUE)
Sol1 #Code debe dar 1 o 2
betaHat1=Sol1$par[1]
lambdaHat1=Sol1$par[2]
1/(9.672175*10^-5)
exp(1)
150*7.16
data1=c(1770,2448,3230,3445,3538,5809,6590,6744)
data2=c(1090,1907,2147,2645,2903,3357,4135,4381)
data3=c(630,848,1121,1307,1321,1357,1984,2331)
S0=50
S1=80
S2=100
S3=120
n1=length(data1)
n2=length(data2)
n3=length(data3)
log.likelihood= function(theta){
b0=theta[1]
b1=theta[2]
l=n1*(b0+b1*S1)-exp(b0+b1*S1)*sum(data1)+n2*(b0+b1*S1)-exp(b0+b1*S2)*sum(data2)+n3*(b0+b1*S3)-exp(b0+b1*S3)*sum(data3)
return(-l)
}
Sol=nlminb(c(0.0001,2),log.likelihood, hessian = TRUE)
Sol #Code debe dar 1 o 2
betaHat=Sol$par[1]
lambdaHat=Sol$par[2]
Sol=nlminb(c(1,2),log.likelihood, hessian = TRUE)
Sol #Code debe dar 1 o 2
Sol=nlm(c(1,2),log.likelihood, hessian = TRUE)
Sol=nlm(log.likelihood,c(1,2), hessian = TRUE)
Sol #Code debe dar 1 o 2
Sol=nlm(log.likelihood,c(0.5,0.05), hessian = TRUE)
Sol #Code debe dar 1 o 2
log.likelihood= function(theta){
b0=theta[1]
b1=theta[2]
l=n1*log(b0+b1*S1)-exp(b0+b1*S1)*sum(data1)+n2*log(b0+b1*S1)-exp(b0+b1*S2)*sum(data2)+n3*log(b0+b1*S3)-exp(b0+b1*S3)*sum(data3)
return(-l)
}
Sol=nlm(log.likelihood,c(0.5,0.05), hessian = TRUE)
Sol #Code debe dar 1 o 2
log.likelihood= function(theta){
b0=theta[1]
b1=theta[2]
l=n1*(b0+b1*S1)-exp(b0+b1*S1)*sum(data1)+n2*(b0+b1*S1)-exp(b0+b1*S2)*sum(data2)+n3*(b0+b1*S3)-exp(b0+b1*S3)*sum(data3)
return(-l)
}
Sol=nlm(log.likelihood,c(0.5,0.05), hessian = TRUE)
Sol #Code debe dar 1 o 2
sum(data1)
log.likelihood= function(theta){
b0=theta[1]
b1=theta[2]
l=n1*(b0+b1*S1)-exp(b0+b1*S1)*sum(data1)+n2*(b0+b1*S2)-exp(b0+b1*S2)*sum(data2)+n3*(b0+b1*S3)-exp(b0+b1*S3)*sum(data3)
return(-l)
}
Sol=nlm(log.likelihood,c(0.5,0.05), hessian = TRUE)
Sol #Code debe dar 1 o 2
log.likelihood(c(1,1))
FailureTimes_5 <- read.csv("~/UTT/OS13/FailureTimes_5.csv")
View(FailureTimes_5)
data=FailureTimes_5$Heures
hist(data, freq = FALSE)
View(FailureTimes_5)
qqplot(qexp(ppoints(500),rate = 3) ,data)
qqline(data, distribution = function(p) qexp(p,rate = 3), col="red")
qqPlot(data, distribution = "exp", rate = 3)
ks.test(data,"pexp")
ks.test(data,"pexp",rate=3)
qqline(data, distribution = function(p) qexp(p), col="red")
qqplot(qexp(ppoints(500)) ,data)
qqPlot(data, distribution = "exp", rate = 3)
library(MASS)
qqPlot(data, distribution = "exp", rate = 3)
library(nortest)
qqPlot(data, distribution = "exp", rate = 3)
qqplot(qexp(ppoints(500),rate = 3) ,data)
qqline(data, distribution = function(p) qexp(p,rate = 3), col="red")
qqPlot(data, distribution = "exp", rate = 3)
library(MASS)
library(nortest)
library(car)
qqPlot(data, distribution = "exp", rate = 3)
qqline(data, distribution = function(p) qexp(p,rate = 3), col="red")
qqPlot(data, distribution = "exp", rate = 3)
qqline(data, distribution = function(p) qexp(p,rate = 3), col="red")
qqline(data, distribution = function(p) qexp(p), col="red")
qqPlot(data, distribution = "exp", rate = 3)
qqPlot(data, distribution = "exp", rate = mean(data))
mean(data)
1/mean(data)
qqPlot(data, distribution = "exp", rate = 1/mean(data))
qqPlot(data, distribution = "exp")
qqPlot(data, distribution = "exp", rate = 1/mean(data))
qqPlot(data, distribution = "exp", rate = mean(data))
ks.test(data,"pexp",rate=1/mean(data))
hist(data, freq = FALSE)
curve(dexp(x, rate = 1/mean(data)), from=0, to=10, col='blue')
curve(dexp(x, rate = 1/mean(data)), col='blue')
hist(data, freq = FALSE)
curve(dexp(x, rate = 1/mean(data)), col='blue')
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue')
hist(data, freq = FALSE)
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue')
hist(data, freq = FALSE)
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
hist(data, freq = FALSE, ylim = c(0,0.1))
hist(data, freq = FALSE, ylim = c(0,1))
hist(data, freq = FALSE, ylim = 1)
hist(data, freq = FALSE)
hist(data, freq = FALSE, ylim = c(0,0.00005))
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
hist(data, freq = FALSE, ylim = c(0,0.0005))
hist(data, freq = FALSE, ylim = c(0,0.0001))
hist(data, freq = FALSE, ylim = c(0,0.0002))
hist(data, freq = FALSE, ylim = c(0,0.00025))
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
hist(data, freq = FALSE, ylim = c(0,0.0003))
hist(data, freq = FALSE, ylim = c(0,0.00021))
hist(data, freq = FALSE, ylim = c(0,0.0002))
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
hist(data, freq = FALSE, ylim = c(0,0.00019))
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
hist(data, freq = FALSE, ylim = c(0,0.0002))
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
hist(data, freq = FALSE, ylim = c(0,0.0002), title="Data avec exponential distribution")
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec exponential distribution")
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
qqPlot(data, distribution = "exp", rate = 1/mean(data))
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Holi')
?qqplot
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
ks.test(data,"pexp",rate=1/mean(data))
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec exponential distribution")
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
qqplot(qgamma(ppoints(500), rate = 3, shape = 1) ,data)
qqline(data, distribution = function(p) qgamma(p,rate = 3, shape = 1), col="red")
qqPlot(data, distribution = "gamma", rate = 3, shape = 1)
ks.test(data,"pgamma",rate=3, shape = 1)
ks.test(data,"pgamma")
egamma(data, method = "mle", ci = FALSE,
ci.type = "two-sided", ci.method = "normal.approx",
normal.approx.transform = "kulkarni.powar", conf.level = 0.95)
qqPlot(data, distribution = "gamma", rate = 3, shape = 1)
ks.test(data,"pgamma",rate=3, shape = 1)
objFunction <- function(myData, alpha) {
sumX <- sum(myData)
prodX <- prod(myData)
n <- length(myData)
estimate <- (1/((gamma(alpha^n))*((sumX/(n*alpha))^(n*alpha))))*((prodX)^(alpha-1))*(exp(1)^(-n*alpha))
return(-1*estimate)
}
optim(par=0, fn=objFunction, method = "Brent", lower = 0, upper = 10, alpha=2)
objFunction <- function(data, alpha) {
sumX <- sum(myData)
prodX <- prod(myData)
n <- length(myData)
estimate <- (1/((gamma(alpha^n))*((sumX/(n*alpha))^(n*alpha))))*((prodX)^(alpha-1))*(exp(1)^(-n*alpha))
return(-1*estimate)
}
optim(par=0, fn=objFunction, method = "Brent", lower = 0, upper = 10, alpha=2)
nlm(objFunction, momAlpha, myData=data)
nlm(objFunction, 0.2, myData=data)
nlm(objFunction, 2, myData=data)
optimize(f=objFunction, c(0,10), alpha=2, maximum=TRUE)
qqPlot(data, distribution = "gamma", rate = 3, shape = 1)
qqPlot(data, distribution = "lnorm", meanlog =  5, sdlog = sqrt(5))
qqnorm(data)
qqline(data, col="red")
qqPlot(data, distribution = "weib", meanlog =  5, sdlog = sqrt(5))
?qqPlot(data, distribution = "weib", meanlog =  5, sdlog = sqrt(5))
qqPlot(data, distribution = "chisq", meanlog =  5, sdlog = sqrt(5))
qqPlot(data, distribution = "chisq")
qqPlot(data, distribution = "chisq", df=2)
qqPlot(data, distribution = "weibull", df=2)
qqPlot(data, distribution = "weibull")
qqPlot(data, distribution = "weibull", shape=1)
ks.test(data,"plnorm",shape=1)
ks.test(data,"weibull",shape=1)
ks.test(data,"pweibull",shape=1)
#### Exponential distribution ####
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
ks.test(data,"pexp",rate=1/mean(data))
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec exponential distribution")
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
qqPlot(data, distribution = "gamma", rate = 3, shape = 1)
qqPlot(data, distribution = "lnorm", meanlog =  5, sdlog = sqrt(5))
qqPlot(data, distribution = "chisq", df=2)
qqPlot(data, distribution = "weibull", shape=1)
log.likelihoodWEIBULL= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
SolG=nlminb(c(0.0001,2),log.likelihood3, hessian = TRUE)
SolG=nlminb(c(0.0001,2),log.likelihood, hessian = TRUE)
SolG=nlminb(c(0.0001,2),log.likelihoodWEIBULL, hessian = TRUE)
SolG #Code debe dar 1 o 2
SolG=nlminb(c(1,2),log.likelihoodWEIBULL, hessian = TRUE)
SolG #Code debe dar 1 o 2
SolG=nlminb(c(0.001,2),log.likelihoodWEIBULL, hessian = TRUE)
SolG #Code debe dar 1 o 2
qqPlot(data, distribution = "lnorm", meanlog =  5, sdlog = sqrt(5))
qqPlot(data, distribution = "lnorm", meanlog =  log(mean(data)), sdlog = log(sd(data)))
qqPlot(data, distribution = "lnorm")
SolG #Code debe dar 1 o 2
betaHatG=Sol$par[1]
lambdaHatG=Sol$par[2]
betaHatG=SolG$par[1]
lambdaHatG=SolG$par[2]
?pweibull
qqPlot(data, distribution = "weibull", shape=betaHatG, scale=lambdaHatG)
qqPlot(data, distribution = "weibull", shape=1/betaHatG, scale=lambdaHatG)
qqPlot(data, distribution = "weibull", shape=lambdaHatG, scale=betaHatG)
qqPlot(data, distribution = "weibull", shape=betaHatG, scale=1/lambdaHatG)
ks.test(data,"pweibull",shape=betaHatG,scale=1/lambdaHatG)
?ks.test(data,"pweibull",shape=betaHatG,scale=1/lambdaHatG)
x
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec exponential distribution")
curve(dweibull(x, shape=betaHatG, scale=1/lambdaHatG), from=0, to=max(data), col='blue', add=TRUE)
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Weibull distribution")
curve(dweibull(x, shape=betaHatG, scale=1/lambdaHatG), from=0, to=max(data), col='blue', add=TRUE)
qqPlot(data, distribution = "weibull", shape=betaHatG, scale=1/lambdaHatG , main='Quantile-Quantile Plot of data with Weibull distribution')
ks.test(data,"pweibull",shape=betaHatG,scale=1/lambdaHatG)
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Weibull distribution")
curve(dweibull(x, shape=betaHatG, scale=1/lambdaHatG), from=0, to=max(data), col='blue', add=TRUE)
alpha=escala*mean(data)
forma=mean(data)**2/var(data)
escala=mean(data)/forma
forma=mean(data)**2/var(data)
escala=mean(data)/forma
qqPlot(data, distribution = "gamma", rate = escala, shape = forma)
qqPlot(data, distribution = "gamma", rate = escala, shape = 1/forma)
?dgamma
forma
escala
qqPlot(data, distribution = "gamma", rate = escala, shape = forma)
qqPlot(data, distribution = "gamma", rate = 1/escala, shape = forma)
qqPlot(data, distribution = "gamma", scale = escala, shape = forma)
ks.test(data,"pgamma",scale = escala, shape = forma)
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Gamma distribution")
curve(dweibull(x, scale = escala, shape = forma), from=0, to=max(data), col='blue', add=TRUE)
ks.test(data,"chisq",df =  2)
ks.test(data,"pchisq",df =  2)
qqPlot(data, distribution = "lnorm")
#### LogNormal distribution ####
mlog=log(mean(data)/sqrt(var(data)/mean(data)**2 + 1))
qqPlot(data, distribution = "lnorm",meanlog =  mlog)
qqPlot(data, distribution = "lnorm",meanlog =  mlog, sdlog=stdlog)
stdlog=sqrt(log(var(data)/mean(data)**2 + 1))
qqPlot(data, distribution = "lnorm",meanlog =  mlog, sdlog=stdlog)
ks.test(data,"plnorm",meanlog =  mlog, sdlog=stdlog)
?qlnorm
ks.test(data,"pexp",rate=1/mean(data))
ks.test(data,"pexp")
?fitdistr
fitdistr(data, "gamma")
fitdistr(data, "exp")
fitdistr(data, "log-normal")
solLN=fitdistr(data, "log-normal")
solLN$estimate
solLN$estimate[0]
solLN$estimate[1]
solLN$estimate[1]
solLN$estimate[2]
mlog=solLN$estimate[1]
stdlog=solLN$estimate[2]
qqPlot(data, distribution = "lnorm",meanlog =  mlog, sdlog=stdlog)
ks.test(data,"plnorm",meanlog =  mlog, sdlog=stdlog)
ks.test(data,"plnorm",meanlog =  mlog, sdlog=stdlog)
mlog=log(mean(data)/sqrt(var(data)/mean(data)**2 + 1))
stdlog=sqrt(log(var(data)/mean(data)**2 + 1))
qqPlot(data, distribution = "lnorm",meanlog =  mlog, sdlog=stdlog)
ks.test(data,"plnorm",meanlog =  mlog, sdlog=stdlog)
mean(data)
solLN
#### LogNormal distribution ####
solLN=fitdistr(data, "log-normal")
#mlog=log(mean(data)/sqrt(var(data)/mean(data)**2 + 1))
#stdlog=sqrt(log(var(data)/mean(data)**2 + 1))
mlog=solLN$estimate[1]
stdlog=solLN$estimate[2]
qqPlot(data, distribution = "lnorm",meanlog =  mlog, sdlog=stdlog)
ks.test(data,"plnorm",meanlog =  mlog, sdlog=stdlog)
#### LogNormal distribution ####
solLN=fitdistr(data, "chisq")
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared")
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = 1)
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = 0)
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared")
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = c(2))
?rchisq
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = 2)
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = 0.1)
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = c(0.1))
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = c(1))
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = c(1,1))
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = c('df'))
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = 'df')
ks.test(data,"pexp",rate=1/mean(data))
ks.test(data,"pgamma",scale = escala, shape = forma)
ks.test(data,"plnorm",meanlog =  mlog, sdlog=stdlog)
? ks.test
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Gamma distribution")
curve(dgamma(x, scale = escala, shape = forma), from=0, to=max(data), col='blue', add=TRUE)
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Log-Normal distribution")
curve(dlnorm(x, meanlog =  mlog, sdlog=stdlog), from=0, to=max(data), col='blue', add=TRUE)
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = 'df')
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared")
qqPlot(data, distribution = "chisq", df=2)
qqPlot(data, distribution = "chisq", df=12)
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start = 12)
#### LogNormal distribution ####
solLN=fitdistr(data, "chi-squared",start=list(df=3) )
solLN
dfCh=solLN$estimate[1]
qqPlot(data, distribution = "chisq", df=dfCh)
ks.test(data,"pchisq",df =  dfCh)
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Log-Normal distribution")
curve(dlnorm(x, meanlog =  mlog, sdlog=stdlog), from=0, to=max(data), col='blue', add=TRUE)
qqPlot(data, distribution = "weibull", shape=betaHatW, scale=1/lambdaHatW , main='Quantile-Quantile Plot of data with Weibull distribution')
qqPlot(data, distribution = "weibull", shape=betaHatW, scale=1/lambdaHatW , main='Quantile-Quantile Plot of data with Weibull distribution')
log.likelihoodWEIBULL= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
SolW=nlminb(c(0.001,2),log.likelihoodWEIBULL, hessian = TRUE)
SolW #Code debe dar 1 o 2
betaHatW=SolW$par[1]
lambdaHatW=SolW$par[2]
qqPlot(data, distribution = "weibull", shape=betaHatW, scale=1/lambdaHatW , main='Quantile-Quantile Plot of data with Weibull distribution')
qqPlot(data, distribution = "chisq", df=dfCh, main='Quantile-Quantile Plot of data with Chi-Squared distribution')
ks.test(data,"pchisq",df =  dfCh)
FailureTimes_5=read.csv('FailureTimes_5.csv',sep = ',')
View(FailureTimes_5)
View(FailureTimes_5)
data=FailureTimes_5$Heures
hist(data, freq = FALSE)
#### Exponential distribution ####
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
ks.test(data,"pexp",rate=1/mean(data))
library(car)
library(MASS)
library(nortest)
#### Exponential distribution ####
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
ks.test(data,"pexp",rate=1/mean(data))
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec exponential distribution")
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
?fitdistr
log.likelihoodWEIBULL= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
SolW=nlminb(c(0.001,2),log.likelihoodWEIBULL, hessian = TRUE)
