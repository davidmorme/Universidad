a=c(2,3,4,5)
a
A
f=funtion(x) x**2
f=funtion(x) {x**2
}
x**2
f=funtion(x) {
x**2
}
f=funtion(x) x^2
f(2)
return(x^2)
return(M^2)
f=funtion(x) {
return(x^2)
}
f=funtion(x) {
return(x^2)
}
f(2)
f=function(x) {
return(x^2)
}
f(2)
return(exp(sqrt(t))/(2*sqrt(t)))
h=function(t) {
return(exp(sqrt(t))/(2*sqrt(t)))
}
f(2)
h(2)
h(3)
h=function(t)exp(sqrt(t))/(2*sqrt(t)))
h(3)
h=function(t) exp(sqrt(t))/(2*sqrt(t)))
h=function(t) exp(sqrt(t))/(2*sqrt(t))
h(3)
sapply(a,f)
View(f)
function(x) x^2
View(h)
View(f)
function(x) x^2
f=function(x) x^2
View(f)
sapply(a,f)
h=function(t) exp(sqrt(t))/(2*sqrt(t))
h(3)
plot(sapply(a,f))
a=c(-5,0,5)
plot(sapply(a,f))
plot(sapply(a,f),type = "l")
a=seq(-5,5)
a=seq(-5,5, by = 0.1)
plot(sapply(a,f),type = "l")
plot(a,sapply(a,f),type = "l")
a[-1]
a=seq(-5,5.1, by = 0.1)
plot(a,sapply(a,f),type = "l")
a[-1]
a[1]
a[50]
a[1000]
a[100]
a[101]
a=c(-5,0,5)
y=sapply(a,f)
plot(a,y,type = "l")
a=seq(-5,5.1, by = 0.1)
y=sapply(a,f)
plot(a,y,type = "l")
plot(a,y,type = "l", title="Hola")
plot(a,y,type = "l", title("Hola"))
title("Hola")
plot(a,y,type = "l", col="r")
plot(a,y,type = "l", col="red")
plot(a,y,type = "l", col="blue")
title("X^2   -5<x<5", col="blue")
title("X^2   -5<x<5")
plot(a,y,type = "l", col="blue", xlab = "x")
title("X^2   -5<x<5")
a=seq(0,20, by = 0.1)
y=sapply(a,h)
plot(a,y,type = "l", col="blue", xlab = "x")
title("X^2   -5<x<5")
a=seq(0,2, by = 0.1)
y=sapply(a,h)
plot(a,y,type = "l", col="blue", xlab = "x")
a=seq(0,5, by = 0.1)
y=sapply(a,h)
plot(a,y,type = "l", col="blue", xlab = "x")
title("Holi")
integrate(h)
integrate(h,lower = 0, upper = 90)
integrate(f,lower = -5, upper = 5)
integrate(h,lower = 0, upper = 3)
integrate(h,lower = 0, upper = 3)$value
exp(integrate(h,lower = 0, upper = 3)$value)
exp(-integrate(h,lower = 0, upper = 3)$value)
exp(-integrate(h,lower = 0, upper = 1)$value)
exp(-integrate(h,lower = 0, upper = 3)$value)
plot(a,y,type = "l", col="blue", xlab = "t")
title("Holi")
R=funtion(t) exp(-integrate(t,lower = 0, upper = 3)$value)
R=function(t) exp(-integrate(t,lower = 0, upper = 3)$value)
R(3)
R(3)
R=function(t) exp(-integrate(h,lower = 0, upper = t)$value)
R(3)
sapply(c(1,4,10),R)
y=sapply(a,R)
plot(a,y,type = "l", col="blue", xlab = "t")
y=sapply(a,R)
a=seq(0.1,5, by = 0.1)
y=sapply(a,R)
plot(a,y,type = "l", col="blue", xlab = "t")
title("Function of R(t)")
a=seq(0.1,5, by = 0.1)
y=sapply(a,h)
plot(a,y,type = "l", col="blue", xlab = "t")
title("Function of h(t)")
plot(a,y,type = "l", col="blue", xlab = "t")
y=sapply(a,R)
plot(a,y,type = "l", col="blue", xlab = "t")
title("Function of R(t)")
y=sapply(a,h)
plot(a,y,type = "l", col="blue", xlab = "t")
title("Function of h(t)")
y=sapply(a,R)
plot(a,y,type = "l", col="blue", xlab = "t")
title("Function of R(t)")
Ft=function(t) 1-R(t)
Ft(3)
Ft(1)
plot(lines(x,sapply(a,R)),lines(x,sapply(a,Ft)))
plot(lines(a,sapply(a,R)),lines(a,sapply(a,Ft)))
plot(a,sapply(a,R),lines(a,sapply(a,Ft)))
plot(a,sapply(a,R),type = "l", lines(a,sapply(a,Ft)))
lines(a,sapply(a,Ft))
plot(a,sapply(a,R),type = "l", ylim = 1)
lines(a,sapply(a,Ft))
plot(a,sapply(a,R),type = "l", ylim = c(0,1))
lines(a,sapply(a,Ft))
# Calcular la probabilidad de que viva u tiempo dado que ya ha vivido t
m=function(u,t) integrate(R(u)/R(t), lower = t, upper = u)
# Calcular la probabilidad de que viva u tiempo dado que ya ha vivido t
m=function(t) integrate(R(u)/R(t), lower = t, upper = Inf)
m(3)
m=function(t) integrate(RR(u), lower = t, upper = Inf)
m(3)
RR=function(u)R(u)/R(t)
m=function(t) integrate(RR(u), lower = t, upper = Inf)
m(3)
m(3.1)
R(3)
m=function(t) integrate(R, lower = t, upper = Inf)/R(3)
m(3)
m(3.1)
R=function(t) 4/(t+2)**2
m=function(t) integrate(R, lower = t, upper = Inf)/R(3)
m(3.1)
m=function(t) integrate(R, lower = t, upper = Inf)
m(3.1)
m(3)
m=function(t) integrate(R, lower = t, upper = Inf)/R(3)
m(3)
m=function(t) integrate(R, lower = t, upper = Inf)$value/R(3)
m(3)
m=function(t) integrate(R, lower = t, upper = Inf)$value/R(t)
m(3)
fun = expression(x**2+y)
D(E1,"x")
E1 = expression(x**2*y+z)
D(E1,"x")
D(E1,"y")
D(E1,"z")
E1(1,2,3)
E2 = expression(x*y+z)
E1/E2
expression(E1/E2)
E3=expression(E1/E2)
D(E3, "x")
D(E3, "y")
D(E1,"x")/D(E1,"y")
D(E1,"x")
h=function(t) (1-R(t))/R(t)
h(2)
R1=expression(4/(t+2)**2)
D(R1,"t")
Ft=expression(1-4/(t+2)**2)
D(Ft,"t")
TO=D(Ft,"t")
TO
TO(1)
type(TO)
TO=function(t) D(Ft,"t")
TO(2)
TO=function(t) 4 * (2 * (t + 2))/((t + 2)^2)^2
TO(2)
h=function(t) (4 * (2 * (t + 2))/((t + 2)^2)^2)/R(t)
h(2)
R=function(t) 4/(t+2)**2
Ft=expression(1-4/(t+2)**2)
D(Ft,"t")
h(4)
plot(a,sapply(a,h), type="l")
a=seq(0,5, by = 0.1)
plot(a,sapply(a,h), type="l",)
plot(a,sapply(a,h), type="l",ylim=c(0,1))
a=seq(0,20, by = 0.1)
plot(a,sapply(a,h), type="l",ylim=c(0,1))
R=function(t) 4/(t+2)**2
m=function(t) integrate(R, lower = t, upper = Inf)$value/R(t)
m(3)
Ft=expression(1-4/(t+2)**2)
D(Ft,"t")
f=function(t) 4 * (2 * (t + 2))/((t + 2)^2)^2
h=function(t) f(t)/R(t)
a=seq(0,20, by = 0.1)
plot(a,sapply(a,h), type="l",ylim=c(0,1))
plot(a,sapply(a,h), type="l",ylim=c(0,1), title="h(t)")
title("h(t)")
title("R(t)")
plot(a,sapply(a,R), type="l",ylim=c(0,1))
title("R(t)")
plot(a,sapply(a,h), type="l",ylim=c(0,1))
title("h(t)")
plot(a,sapply(a,R), type="l",ylim=c(0,1))
title("R(t)")
plot(a,sapply(a,Ft), type="l",ylim=c(0,1))
title("F(t)")
Ft1=function(t) 1-4/(t+2)**2
plot(a,sapply(a,Ft1), type="l",ylim=c(0,1))
title("F(t)")
plot(a,sapply(a,f), type="l",ylim=c(0,1))
title("f(t)")
?RNORM
?rnorm
rexp(10,rate=2)
?rexp(10,rate=2)
?rnorm
data=rexp(10000,rate=2)
Landa_Linda = 1/mean(data)
Landa_Linda
dataG=rgamma(10000, shape = 2, rate = 4)
alpha=mean(dataG)**2/var(dataG)
Beta=mean(dataG)/var(dataG)
source("~/GitHub/Universidad/OS13/2 Classe.R")
?var
varP=var(dataG)*(n-1)/n
alpha=mean(dataG)**2/varP
Beta=mean(dataG)/varP
varP=var(dataG)*(n-1)/n
n=length(dataG)
varP=var(dataG)*(n-1)/n
alpha=mean(dataG)**2/varP
Beta=mean(dataG)/varP
alpha
Beta
len(dataG)
length(dataG)
?rnorm
dataLN=rlnorm(10000, meanlog = 2, sdlog = 5)
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu
Sigma
log(miu)
dataLN=rlnorm(10000, meanlog = 2, sdlog = sqrt(5))
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu
Sigma
log(miu)
dataLN=rlnorm(10000, meanlog = 2, sdlog = sqrt(5))
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
log(miu)
Sigma
miu
dataLN=rlnorm(100000, meanlog = 2, sdlog = sqrt(5))
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN))-Sigma**2/2
miu
Sigma
Sigma**2
dataLN=rlnorm(1000000, meanlog = 2, sdlog = sqrt(5))
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN))-Sigma**2/2
#log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
#miu=log(mean(dataLN))-Sigma**2/2
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
dataLN=rlnorm(100000000, meanlog = 2, sdlog = sqrt(5))
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
#miu=log(mean(dataLN))-Sigma**2/2
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
install.packages("rootSolve")
library("rootSolve")
ans=multiroot(Equations.start=c(2,3))
ans
dataW = rweibull(1000,2,4)
A=mean(dataW)
n=length(dataLW)
B=var(dataLW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
A=mean(dataW)
n=length(dataW)
B=var(dataW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
ans=multiroot(Equations.start=c(2,3))
ans=multiroot(Equations.start=c(2,2))
ans=multiroot(Equations,start=c(2,2))
ans
rweibull()
?rweibull()
dataW = rweibull(1000,shape = 2, scale = 4)
A=mean(dataW)
n=length(dataW)
B=var(dataW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
ans=multiroot(Equations,start=c(2,2))
ans
Landa=1/ans$root[1]
Beta=ans$root[2]
Landa
Beta
