l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
SolW=nlminb(c(0.001,2),log.likelihoodWEIBULL, hessian = TRUE)
SolW #Code debe dar 1 o 2
betaHatW=SolW$par[1]
lambdaHatW=SolW$par[2]
qqPlot(data, distribution = "weibull", shape=betaHatW, scale=1/lambdaHatW , main='Quantile-Quantile Plot of data with Weibull distribution')
qqPlot(data, distribution = "chisq", df=dfCh, main='Quantile-Quantile Plot of data with Chi-Squared distribution')
ks.test(data,"pchisq",df =  dfCh)
FailureTimes_5=read.csv('FailureTimes_5.csv',sep = ',')
View(FailureTimes_5)
View(FailureTimes_5)
data=FailureTimes_5$Heures
hist(data, freq = FALSE)
#### Exponential distribution ####
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
ks.test(data,"pexp",rate=1/mean(data))
library(car)
library(MASS)
library(nortest)
#### Exponential distribution ####
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
ks.test(data,"pexp",rate=1/mean(data))
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec exponential distribution")
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
?fitdistr
log.likelihoodWEIBULL= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
SolW=nlminb(c(0.001,2),log.likelihoodWEIBULL, hessian = TRUE)
FailureTimes_5=read.csv('FailureTimes_5.csv',sep = ',')
View(FailureTimes_5)
View(FailureTimes_5)
data=FailureTimes_5$Heures
hist(data, freq = FALSE)
hist(data, freq = FALSE,bins=30)
hist(data, freq = FALSE,bin=30)
?hist(data, freq = FALSE,bin=30)
hist(data, freq = FALSE,brakes=30)
?hist(data, freq = FALSE,brakes=30)
?hist(data, freq = FALSE)
hist(data, freq = FALSE)
hist(data, freq = FALSE,breaks = 12)
hist(data, freq = FALSE,breaks = 10)
hist(data, freq = FALSE)
hist(data, freq = FALSE,breaks = 7)
hist(data, freq = FALSE,breaks = 5)
hist(data, freq = FALSE,breaks = 10)
hist(data, freq = FALSE,breaks = 9)
#### Exponential distribution ####
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
library(car)
library(MASS)
library(nortest)
#### Exponential distribution ####
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
ks.test(data,"pexp",rate=1/mean(data))
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec exponential distribution")
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
log.likelihoodWEIBULL= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
SolW=nlminb(c(0.001,2),log.likelihoodWEIBULL, hessian = TRUE)
SolW #Code debe dar 1 o 2
betaHatW=SolW$par[1]
lambdaHatW=SolW$par[2]
qqPlot(data, distribution = "weibull", shape=betaHatW, scale=1/lambdaHatW , main='Quantile-Quantile Plot of data with Weibull distribution')
ks.test(data,"pweibull",shape=betaHatW,scale=1/lambdaHatW)
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Weibull distribution")
curve(dweibull(x, shape=betaHatW, scale=1/lambdaHatW), from=0, to=max(data), col='blue', add=TRUE)
forma=mean(data)**2/var(data)
escala=mean(data)/forma
qqPlot(data, distribution = "gamma", scale = escala, shape = forma, main='Quantile-Quantile Plot of data with Gamma distribution')
ks.test(data,"pgamma",scale = escala, shape = forma)
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Gamma distribution")
curve(dgamma(x, scale = escala, shape = forma), from=0, to=max(data), col='blue', add=TRUE)
#### LogNormal distribution ####
solLN=fitdistr(data, "log-normal")
#mlog=log(mean(data)/sqrt(var(data)/mean(data)**2 + 1))
#stdlog=sqrt(log(var(data)/mean(data)**2 + 1))
mlog=solLN$estimate[1]
stdlog=solLN$estimate[2]
qqPlot(data, distribution = "lnorm",meanlog =  mlog, sdlog=stdlog, main='Quantile-Quantile Plot of data with Log-Normal distribution')
ks.test(data,"plnorm",meanlog =  mlog, sdlog=stdlog)
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec Log-Normal distribution")
curve(dlnorm(x, meanlog =  mlog, sdlog=stdlog), from=0, to=max(data), col='blue', add=TRUE)
#### Chi-Squared distribution ####
solLN=fitdistr(data, "chi-squared",start=list(df=3) )
dfCh=solLN$estimate[1]
qqPlot(data, distribution = "chisq", df=dfCh, main='Quantile-Quantile Plot of data with Chi-Squared distribution')
ks.test(data,"pchisq",df =  dfCh)
library(car)
library(MASS)
library(nortest)
#### ESTIMATE THE DISTRIBUTION ####
FailureTimes_5=read.csv('FailureTimes_5.csv',sep = ',')
data=FailureTimes_5$Heures
hist(data, freq = FALSE,breaks = 9)
#### Exponential distribution ####
qqPlot(data, distribution = "exp", rate = 1/mean(data), main='Quantile-Quantile Plot of data with Exponential distribution')
ks.test(data,"pexp",rate=1/mean(data))
hist(data, freq = FALSE, ylim = c(0,0.0002), main="Data avec exponential distribution")
curve(dexp(x, rate = 1/mean(data)), from=0, to=max(data), col='blue', add=TRUE)
rateU=1/mean(data)
rexp(c(2,2),rate=rateU)
rexp(c(5,2),rate=rateU)
rexp(c(5,2),rate=rateU)
rexp(c(5,2),rate=rateU)
rexp(c(5,2),rate=rateU)
seed(111)
rexp(c(5,2),rate=rateU)
random.seed(111)
set.seed(111)
rexp(c(5,2),rate=rateU)
set.seed(111)
rexp(c(5,2),rate=rateU)
rexp(2,rate=rateU)
rexp(5,rate=rateU)
rateU=1/mean(data)/0.2
rateD=1/mean(data)/0.2
rateU=1/mean(data)
1/rateD
1/rateU
U1=sort(U[1:n])
rateU=1/mean(data)
scenarios=100
n=10000
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
rateD=1/mean(data)/0.2
scenarios=100
n=10000
set.seed(222)
D=rexp(n*scenarios,rate=rateU)
U1=sort(U[1:n])
t=c(0,unique(U1))
RHat=rep(0, length(t))
for(i in 1:length(RHat)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
rexp(c((2,2),2),rate=rateU)
rexp(c((2,2)),rate=rateU)
rexp(c(c(2,2)),rate=rateU)
rexp(c(c(2,2),c(3,3)),rate=rateU)
unique(U1)
D1=sort(D[1:n])
t=c(0,unique(U1),unique(D1))
t=sort(t)
RHat=rep(0, length(t))
for(i in 1:length(RHat)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat*20
data
RHat=rep(0, length(t))
for(i in 1:length(RHat)){
RHat[i]=sum(U1>t[i])/length(U1)
}
plot(t,RHat, type = "s")
ateU=1/mean(data)
scenarios=1000
n=100
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
U1=sort(U[1:n/10])
D1=sort(D[1:n/10])
t=c(0,unique(U1),unique(D1))
t=sort(t)
RHat=rep(0, length(t))
U1
U1=sort(U[1:n/10])
D1=sort(D[1:n/10])
U1
n=100
U1=sort(U[1:n/10])
D1=sort(D[1:n/10])
U1
n/10
U1=sort(U[1:(n/10)])
U1
D1=sort(D[1:(n/10)])
U1+D1
D1
R1=U1+D1
t=c(0,unique(U1),unique(R1))
t=sort(t)
RHat=rep(0, length(t))
for(i in 1:length(RHat)){
RHat[i]=sum(U1>t[i])/length(U1)
}
plot(t,RHat, type = "s")
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=n-sum(U1>t[i])+sum(R1>t[i])
}
plot(t,RHat, type = "s")
plot(t,Disp, type = "s")
t
Disp[1]=10
for(i in 1:length(Disp)){
Disp[i]=sum(U1>t[i])+sum(R1>t[i])
}
for(i in 1:length(Disp)){
Disp[i]=Disp[i-1]-sum(U1>t[i])+sum(R1>t[i])
}
plot(t,Disp, type = "s")
for(i in 2:length(Disp)){
Disp[i]=Disp[i-1]-sum(U1>t[i])+sum(R1>t[i])
}
plot(t,Disp, type = "s")
U1
R1
for(i in 2:length(Disp)){
Disp[i]=Disp[i-1]-sum(U1<t[i])+sum(R1<t[i])
}
plot(t,Disp, type = "s")
Disp=rep(0, length(t))
Disp[1]=10
for(i in 2:length(Disp)){
Disp[i]=Disp[i-1]-sum(U1<t[i])+sum(R1<t[i])
}
plot(t,Disp, type = "s")
R1<t[i]
t=c(0,unique(U1),unique(R1))
t=sort(t)
Disp=rep(0, length(t))
Disp[1]=10
for(i in 2:length(Disp)){
Disp[i]=Disp[i-1]-sum(U1<t[i])+sum(R1<t[i])
}
plot(t,Disp, type = "s")
Disp[i]=Disp[i-1]-sum(U1<t[i])#+sum(R1<t[i])
for(i in 2:length(Disp)){
Disp[i]=Disp[i-1]-sum(U1<t[i])#+sum(R1<t[i])
}
plot(t,Disp, type = "s")
Disp=rep(0, length(t))
Disp[1]=10
for(i in 2:length(Disp)){
Disp[i]=Disp[i-1]-sum(U1<t[i])#+sum(R1<t[i])
}
plot(t,Disp, type = "s")
U1<t[i]
R1<t[i]
U1[U1<t[i]]
U1[U1<t[2]]
t[2]
U1[U1<t[3]]
U1[U1<t[5]]
U1[1:1]
U1=sort(U[1:(n/10)])
D1=sort(D[1:(n/10)])
P1=rep(0, n)
for(i in 1:n){
P1[i]=sum(U1[1:i])
}
U1=U[1:(n/10)]
D1=D[1:(n/10)]
P1=rep(0, n)
for(i in 1:n){
P1[i]=sum(U1[1:i])
}
R1=P1+D1
P1
U1=U[1:n]
D1=D[1:n]
P1=rep(0, n)
for(i in 1:n){
P1[i]=sum(U1[1:i])
}
R1=P1+D1
P1
U1=U[1:n]
D1=D[1:n]
P1=rep(0, n)
R1=rep(0, n)
P1[1]=U1[1]
R1[1]=P1[1]+D1[1]
for(i in 2:n){
P1[i]=R1[i-1]+U1[i]
R1[i]=P1[i]+D1[i]
}
t=c(0,unique(P1),unique(R1))
t=sort(t)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=Disp[i-1]-sum(U1<t[i])+sum(R1<t[i])
}
plot(t,Disp, type = "s")
P[1:10]
P1[1:10]
R1[1:10]
t[1:10]
t=c(0,unique(P1),unique(R1))
t=sort(t)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=Disp[i-1]-sum(P1<=t[i])+sum(D1<=t[i])
}
plot(t,Disp, type = "s")
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(D1<=t[i])
}
plot(t,Disp, type = "s")
P1<=t[5]
t=c(0,unique(P1),unique(R1))
t=sort(t)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
seq(0,R[n],2)
seq(0,R1[n],2)
t=seq(0,R1[n],2)
t=sort(t)
Disp=rep(0, length(t))
t=seq(0,R1[n],2)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
matrix(1:9,nrow = 3,ncol = 3)
matrix(U,nrow = n,ncol = scenarios)
matrix(U,nrow = n,ncol = scenarios)[1]
matrix(U,nrow = n,ncol = scenarios)[1,]
matrix(U,nrow = n,ncol = scenarios)[,1]
U=rexp(n*scenarios,rate=rateU)
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
U=matrix(U,nrow = scenarios,ncol = n)
U1=U[1,]
matrix(0,nrow = 4,ncol = 2)
len(U)
length(U)
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U1[,1]
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
U=rexp(n*scenarios,rate=rateU)
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
U=matrix(U,nrow = scenarios,ncol = n)
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U1[,i]
R1[,i]=P1[,i]+D1[,i]
}
t=seq(0,max(R1[,n]),2)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
Disp
t
max(R1[,n])
R1[,n]
R1[,n-1]
R1[1,i-1]+U1[1,i]
i=2
R1[1,i-1]+U1[1,i]
P1
P1[1]
P1[1,]
U[,1]
P1[,1]=U[,1]
P1[,1]
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U[,i]
R1[,i]=P1[,i]+D[,i]
}
t=seq(0,max(R1[,n]),2)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
t=seq(0,max(R1[,n]),500)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
plot(t,Disp, type = "s", xlim=c(0,2000))
plot(t,Disp, type = "s", xlim=c(0,20000))
plot(t,Disp,  xlim=c(0,20000))
plot(t,Disp,  xlim=c(0,5*10e5))
plot(t,Disp,  xlim=c(0,2*10e5))
plot(t,Disp,  xlim=c(0,2*10e4))
plot(t,Disp,  xlim=c(0, 5*10e4))
plot(t,Disp,  xlim=c(0, 2*10e4))
plot(t,Disp,  xlim=c(0, 2*10e3))
plot(t,Disp,  xlim=c(0, 5*10e3))
?plot(t,Disp, type = '' ,xlim=c(0, 5*10e3))
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3))
t=seq(0,max(R1[,n]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3))
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3))
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0,1))
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
U1=U[1,]
D1=D[1,]
P1=rep(0, n)
R1=rep(0, n)
P1[1]=U1[1]
R1[1]=P1[1]+D1[1]
for(i in 2:n){
P1[i]=R1[i-1]+U1[i]
R1[i]=P1[i]+D1[i]
}
t=seq(0,R1[n],2)
Disp=rep(0, length(t))
Disp[1]=1
for(i in 2:length(Disp)){
Disp[i]=1-sum(P1<=t[i])+sum(R1<=t[i])
}
plot(t,Disp, type = "s")
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U[,i]
R1[,i]=P1[,i]+D[,i]
}
t=seq(0,max(R1[,n]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
rateU=1/mean(data)
scenarios=5000
n=100
set.seed(111)
U=rexp(n*scenarios,rate=rateU)
U=matrix(U,nrow = scenarios,ncol = n)
rateD=1/mean(data)/0.2
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U[,i]
R1[,i]=P1[,i]+D[,i]
}
t=seq(0,max(R1[,n]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD)
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.8,0.9), main='Disponibilité de produit dans le temps')
rateD=1/mean(data)/0.5
set.seed(222)
D=rexp(n*scenarios,rate=rateD)
D=matrix(D,nrow = scenarios,ncol = n)
P1=matrix(0,nrow = scenarios,ncol = n)
R1=matrix(0,nrow = scenarios,ncol = n)
P1[,1]=U[,1]
R1[,1]=P1[,1]+D[,1]
for(i in 2:n){
P1[,i]=R1[,i-1]+U[,i]
R1[,i]=P1[,i]+D[,i]
}
t=seq(0,max(R1[,n]),100)
Disp=rep(0, length(t))
for(i in 1:length(Disp)){
Disp[i]=scenarios-sum(P1<=t[i])+sum(R1<=t[i])
}
Disp=Disp/scenarios
plot(t,Disp, type = 'l' ,xlim=c(0, 5*10e3), ylim=c(0.5,1), main='Disponibilité de produit dans le temps')
(1/rateU)/(1/rateU+1/rateD) #Debe converger a este valor.
