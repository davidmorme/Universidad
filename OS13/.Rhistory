plot(a,y,type = "l", col="blue", xlab = "t")
title("Function of R(t)")
y=sapply(a,h)
plot(a,y,type = "l", col="blue", xlab = "t")
title("Function of h(t)")
y=sapply(a,R)
plot(a,y,type = "l", col="blue", xlab = "t")
title("Function of R(t)")
Ft=function(t) 1-R(t)
Ft(3)
Ft(1)
plot(lines(x,sapply(a,R)),lines(x,sapply(a,Ft)))
plot(lines(a,sapply(a,R)),lines(a,sapply(a,Ft)))
plot(a,sapply(a,R),lines(a,sapply(a,Ft)))
plot(a,sapply(a,R),type = "l", lines(a,sapply(a,Ft)))
lines(a,sapply(a,Ft))
plot(a,sapply(a,R),type = "l", ylim = 1)
lines(a,sapply(a,Ft))
plot(a,sapply(a,R),type = "l", ylim = c(0,1))
lines(a,sapply(a,Ft))
# Calcular la probabilidad de que viva u tiempo dado que ya ha vivido t
m=function(u,t) integrate(R(u)/R(t), lower = t, upper = u)
# Calcular la probabilidad de que viva u tiempo dado que ya ha vivido t
m=function(t) integrate(R(u)/R(t), lower = t, upper = Inf)
m(3)
m=function(t) integrate(RR(u), lower = t, upper = Inf)
m(3)
RR=function(u)R(u)/R(t)
m=function(t) integrate(RR(u), lower = t, upper = Inf)
m(3)
m(3.1)
R(3)
m=function(t) integrate(R, lower = t, upper = Inf)/R(3)
m(3)
m(3.1)
R=function(t) 4/(t+2)**2
m=function(t) integrate(R, lower = t, upper = Inf)/R(3)
m(3.1)
m=function(t) integrate(R, lower = t, upper = Inf)
m(3.1)
m(3)
m=function(t) integrate(R, lower = t, upper = Inf)/R(3)
m(3)
m=function(t) integrate(R, lower = t, upper = Inf)$value/R(3)
m(3)
m=function(t) integrate(R, lower = t, upper = Inf)$value/R(t)
m(3)
fun = expression(x**2+y)
D(E1,"x")
E1 = expression(x**2*y+z)
D(E1,"x")
D(E1,"y")
D(E1,"z")
E1(1,2,3)
E2 = expression(x*y+z)
E1/E2
expression(E1/E2)
E3=expression(E1/E2)
D(E3, "x")
D(E3, "y")
D(E1,"x")/D(E1,"y")
D(E1,"x")
h=function(t) (1-R(t))/R(t)
h(2)
R1=expression(4/(t+2)**2)
D(R1,"t")
Ft=expression(1-4/(t+2)**2)
D(Ft,"t")
TO=D(Ft,"t")
TO
TO(1)
type(TO)
TO=function(t) D(Ft,"t")
TO(2)
TO=function(t) 4 * (2 * (t + 2))/((t + 2)^2)^2
TO(2)
h=function(t) (4 * (2 * (t + 2))/((t + 2)^2)^2)/R(t)
h(2)
R=function(t) 4/(t+2)**2
Ft=expression(1-4/(t+2)**2)
D(Ft,"t")
h(4)
plot(a,sapply(a,h), type="l")
a=seq(0,5, by = 0.1)
plot(a,sapply(a,h), type="l",)
plot(a,sapply(a,h), type="l",ylim=c(0,1))
a=seq(0,20, by = 0.1)
plot(a,sapply(a,h), type="l",ylim=c(0,1))
R=function(t) 4/(t+2)**2
m=function(t) integrate(R, lower = t, upper = Inf)$value/R(t)
m(3)
Ft=expression(1-4/(t+2)**2)
D(Ft,"t")
f=function(t) 4 * (2 * (t + 2))/((t + 2)^2)^2
h=function(t) f(t)/R(t)
a=seq(0,20, by = 0.1)
plot(a,sapply(a,h), type="l",ylim=c(0,1))
plot(a,sapply(a,h), type="l",ylim=c(0,1), title="h(t)")
title("h(t)")
title("R(t)")
plot(a,sapply(a,R), type="l",ylim=c(0,1))
title("R(t)")
plot(a,sapply(a,h), type="l",ylim=c(0,1))
title("h(t)")
plot(a,sapply(a,R), type="l",ylim=c(0,1))
title("R(t)")
plot(a,sapply(a,Ft), type="l",ylim=c(0,1))
title("F(t)")
Ft1=function(t) 1-4/(t+2)**2
plot(a,sapply(a,Ft1), type="l",ylim=c(0,1))
title("F(t)")
plot(a,sapply(a,f), type="l",ylim=c(0,1))
title("f(t)")
?RNORM
?rnorm
rexp(10,rate=2)
?rexp(10,rate=2)
?rnorm
data=rexp(10000,rate=2)
Landa_Linda = 1/mean(data)
Landa_Linda
dataG=rgamma(10000, shape = 2, rate = 4)
alpha=mean(dataG)**2/var(dataG)
Beta=mean(dataG)/var(dataG)
source("~/GitHub/Universidad/OS13/2 Classe.R")
?var
varP=var(dataG)*(n-1)/n
alpha=mean(dataG)**2/varP
Beta=mean(dataG)/varP
varP=var(dataG)*(n-1)/n
n=length(dataG)
varP=var(dataG)*(n-1)/n
alpha=mean(dataG)**2/varP
Beta=mean(dataG)/varP
alpha
Beta
len(dataG)
length(dataG)
?rnorm
dataLN=rlnorm(10000, meanlog = 2, sdlog = 5)
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu
Sigma
log(miu)
dataLN=rlnorm(10000, meanlog = 2, sdlog = sqrt(5))
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu
Sigma
log(miu)
dataLN=rlnorm(10000, meanlog = 2, sdlog = sqrt(5))
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
log(miu)
Sigma
miu
dataLN=rlnorm(100000, meanlog = 2, sdlog = sqrt(5))
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN))-Sigma**2/2
miu
Sigma
Sigma**2
dataLN=rlnorm(1000000, meanlog = 2, sdlog = sqrt(5))
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
miu=log(mean(dataLN))-Sigma**2/2
#log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
#miu=log(mean(dataLN))-Sigma**2/2
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
dataLN=rlnorm(100000000, meanlog = 2, sdlog = sqrt(5))
#La idea es asumir que la data fue obtenida experimentalmente
#Si sabemos que la distribución es Gamma podemos estimar Alpha Y Beta con
#el método de momentos
n=length(dataLN)
varP=var(dataLN)*(n-1)/n
Sigma=sqrt(log(varP/mean(dataLN)**2+1))
#miu=log(mean(dataLN))-Sigma**2/2
miu=log(mean(dataLN)/sqrt(varP/mean(dataLN)**2+1))
miu
Sigma**2
install.packages("rootSolve")
library("rootSolve")
ans=multiroot(Equations.start=c(2,3))
ans
dataW = rweibull(1000,2,4)
A=mean(dataW)
n=length(dataLW)
B=var(dataLW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
A=mean(dataW)
n=length(dataW)
B=var(dataW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
ans=multiroot(Equations.start=c(2,3))
ans=multiroot(Equations.start=c(2,2))
ans=multiroot(Equations,start=c(2,2))
ans
rweibull()
?rweibull()
dataW = rweibull(1000,shape = 2, scale = 4)
A=mean(dataW)
n=length(dataW)
B=var(dataW)*(n-1)/n
Equations = function(pars){
c(F1=gamma(1+1/pars[2])*pars[1]-A ,
F2= (gamma(1+2/pars[2]) - gamma(1+1/pars[2])**2)*pars[1]**2 - B )
}
ans=multiroot(Equations,start=c(2,2))
ans
Landa=1/ans$root[1]
Beta=ans$root[2]
Landa
Beta
#### Type I ####
lambda=0.001
n=30
C=1000
data=rexp(n, rate=lambda)
data=sort(data)
NewData=data[data<C]
NewData
lambda=0.001
n=30
r=20
data=rexp(n, rate=lambda)
data=sort(data)
NewData=data[1:r]
NewData
C=data[r]
C
c
### Complete data ####
lambda=0.001
n=30
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
#### Type I ####
C=1000
DataT1=dataC[dataC<C]
DataT1
#### Type II ####
r=20
DataT2=dataC[1:r]
C=DataT2[-1]
DataT2
C
C=DataT2[r]
C
#### Complete data ####
lambda=0.001
n=5000
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
lambdaC=1/mean(dataC)
lambdaC
#### Type I ####
C1=1000
DataT1=dataC[dataC<C]
r1=length(DataT1)
lambda1=r1/(sum(DataT1)+(n-r1)*C1)
lambda1
#### Type II ####
r2=20
DataT2=dataC[1:r]
C2=DataT2[r]
lambda2=r2/(sum(DataT2)+(n-r2)*C2)
lambda2
#### Complete data ####
lambda=0.001
n=5000
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
lambdaC=1/mean(dataC)
lambdaC
#### Type I ####
C1=1000
DataT1=dataC[dataC<C]
r1=length(DataT1)
lambda1=r1/(sum(DataT1)+(n-r1)*C1)
lambda1
#### Type II ####
r2=20
DataT2=dataC[1:r2]
C2=DataT2[r2]
lambda2=r2/(sum(DataT2)+(n-r2)*C2)
lambda2
#### Complete data ####
lambda=0.001
n=5000
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
lambdaC=1/mean(dataC)
lambdaC
#### Type I ####
C1=1000
DataT1=dataC[dataC<C1]
r1=length(DataT1)
lambda1=r1/(sum(DataT1)+(n-r1)*C1)
lambda1
#### Type II ####
r2=20
DataT2=dataC[1:r2]
C2=DataT2[r2]
lambda2=r2/(sum(DataT2)+(n-r2)*C2)
lambda2
#### Complete data ####
lambda=0.001
n=5000
dataC=rexp(n, rate=lambda)
dataC=sort(dataC)
lambdaC=1/mean(dataC)
lambdaC
#### Type I ####
C1=1000
DataT1=dataC[dataC<C1]
r1=length(DataT1)
lambda1=r1/(sum(DataT1)+(n-r1)*C1)
lambda1
#### Type II ####
r2=3000
DataT2=dataC[1:r2]
C2=DataT2[r2]
lambda2=r2/(sum(DataT2)+(n-r2)*C2)
lambda2
?rexp
data=c(25,58,87,139,28,63,93,157,29,64,111,168,44,64,126,189,57,76,136,212)
n=length(data)
apply(data,dweibull)
sapply(data,dweibull)
dweibull(data[1],32,32)
dweibull(data,beta,lambda)
dweibull(data,1,2)
log.likelihood= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
-sum(log(l))
}
log.likelihood(c(1,2))
nlm(f=log.likelihood,p = c(1,2))
log.likelihood= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
log.likelihood(c(1,2))
nlm(f=log.likelihood,p = c(1,2))
Sol=nlm(f=log.likelihood,p = c(1,2))
Sol$estimate
betaHat=Sol$estimate$1
betaHat=Sol$estimate[1]
lambdaHat=Sol$estimate[2]
data=c(25,58,87,139,28,63,93,157,29,64,111,168,44,64,126,189,57,76,136,212)
n=length(data)
log.likelihood= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
return(-sum(log(l)))
}
log.likelihood(c(1,2))
Sol=nlm(f = log.likelihood, p = c(1,2))
betaHat=Sol$estimate[1]
lambdaHat=Sol$estimate[2]
Sol
warnings()
Sol=nlm(f = log.likelihood, p = c(1,1))
Sol
?nlm
R=function(t){
return(1-pweibull(t, shape = betaHat, scale = 1/lambdaHat))
}
R(90)
return(pweibull(t, shape = betaHat, scale = 1/lambdaHat,lower.tail = FALSE))
R=function(t){
return(pweibull(t, shape = betaHat, scale = 1/lambdaHat,lower.tail = FALSE))
}
R(90)
tt=seq(0, 500, 0.5)
rr=sapply(tt, R)
plot(rr)
clear
cls
data=c(0.7,52.7,129.7,187.8,264.4,272.8,304.2,305.1,309.8,310.5)
r=length(data)
n=25
log.likelihood= function(tetha){
beta=tetha[1]
lambda=tetha[2]
l=dweibull(data,beta,1/lambda)
l[(r+1):n]=pweibull(data[r],beta,1/lambda, lower.tail = FALSE)
return(-sum(log(l)))
}
Sol=nlm(f = log.likelihood, p = c(1,1))
Sol #Code debe dar 1 o 2
betaHat=Sol$estimate[1]
lambdaHat=Sol$estimate[2]
Sol=nlm(f = log.likelihood, p = c(1.1,0.05))
Sol #Code debe dar 1 o 2
Sol=nlm(f = log.likelihood, p = c(1.1,0.005))
Sol #Code debe dar 1 o 2
sort(data)
data=c(0.06,0.8,0.3,0.03,1.2,0.7,0.92,0.41,0.23,0.32,1.1,1.9,0.4,1.31,1.2,0.7,14,0.9,0.93,0.27)
sort(data)
data=sort(data)
sum(data>data[i])
sum(data>data)
sum(data>data[0])
data[0]
data[1]
sum(data>data[1])
sum(data>data[1])/length(data)
c(0)+data
R=c(0,data)
t[0]=1
sum(data>t)/length(data)
t=c(0,data)
sum(data>t)/length(data)
data>t
t=c(0,data)
R=rep(0, length(data)+1)
for(i in 1:length(R)){
R[i]=sum(data>t[i])/length(data)
}
plot(R)
plot(R, type = "l")
plot(t,R, type = "l")
t
data=c(0.06,0.8,0.3,0.03,1.2,0.7,0.92,0.41,0.23,0.32,1.1,1.9,0.4,1.31,1.2,0.7,1.4,0.9,0.93,0.27)
data=sort(data)
t=c(0,data)
R=rep(0, length(data)+1)
for(i in 1:length(R)){
R[i]=sum(data>t[i])/length(data)
}
plot(t,R, type = "l")
t
plot(t,R, type = "s")
R
RHat/20
data=c(0.06,0.8,0.3,0.03,1.2,0.7,0.92,0.41,0.23,0.32,1.1,1.9,0.4,1.31,1.2,0.7,1.4,0.9,0.93,0.27)
data=sort(data)
t=c(0,data)
RHat=rep(0, length(data)+1)
for(i in 1:length(R)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat/20
RHat*20
t=c(0,unique(data))
RHat=rep(0, length(data)+1)
for(i in 1:length(R)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat*20
RHat=rep(0, t)
RHat=rep(0, length(t))
for(i in 1:length(R)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat*20
data=c(0.06,0.8,0.3,0.03,1.2,0.7,0.92,0.41,0.23,0.32,1.1,1.9,0.4,1.31,1.2,0.7,1.4,0.9,0.93,0.27)
data=sort(data)
t=c(0,unique(data))
RHat=rep(0, length(t))
for(i in 1:length(R)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat=rep(0, length(t))
for(i in 1:length(RHat)){
RHat[i]=sum(data>t[i])/length(data)
}
plot(t,RHat, type = "s")
RHat*20
